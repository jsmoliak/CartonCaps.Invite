// <auto-generated />
using System;
using CartonCaps.Invite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CartonCaps.Invite.Data.Migrations
{
    [DbContext(typeof(InviteContext))]
    partial class InviteContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("CartonCaps.Invite.Model.Entities.Redemption", b =>
                {
                    b.Property<Guid>("RedemptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RedeemedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("RedeemerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReferralCodeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReferralSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ReferrerId")
                        .HasColumnType("TEXT");

                    b.HasKey("RedemptionId");

                    b.HasIndex("ReferralCodeId");

                    b.HasIndex("ReferralSourceId");

                    b.HasIndex("ReferrerId");

                    b.HasIndex("RedeemerId", "ReferralCodeId")
                        .IsUnique();

                    b.ToTable("Redemptions");
                });

            modelBuilder.Entity("CartonCaps.Invite.Model.Entities.Referral", b =>
                {
                    b.Property<Guid>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReferralCodeId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ReferralSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ReferrerId")
                        .HasColumnType("TEXT");

                    b.HasKey("ReferralId");

                    b.HasIndex("ReferralCodeId");

                    b.HasIndex("ReferralSourceId");

                    b.HasIndex("ReferrerId");

                    b.ToTable("Referrals");
                });

            modelBuilder.Entity("CartonCaps.Invite.Model.Entities.ReferralCode", b =>
                {
                    b.Property<Guid>("ReferralCodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("ReferralCodeId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("ReferralCodes");
                });

            modelBuilder.Entity("CartonCaps.Invite.Model.Entities.ReferralSource", b =>
                {
                    b.Property<int>("ReferralSourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ReferralSourceId");

                    b.ToTable("ReferralSource");

                    b.HasData(
                        new
                        {
                            ReferralSourceId = 1,
                            SourceName = "Android"
                        },
                        new
                        {
                            ReferralSourceId = 2,
                            SourceName = "iOS"
                        },
                        new
                        {
                            ReferralSourceId = 3,
                            SourceName = "Chrome"
                        },
                        new
                        {
                            ReferralSourceId = 4,
                            SourceName = "Edge"
                        },
                        new
                        {
                            ReferralSourceId = 5,
                            SourceName = "Firefox"
                        });
                });

            modelBuilder.Entity("CartonCaps.Invite.Model.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AuthId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CartonCaps.Invite.Model.Entities.Redemption", b =>
                {
                    b.HasOne("CartonCaps.Invite.Model.Entities.User", "Redeemer")
                        .WithMany("Redemptions")
                        .HasForeignKey("RedeemerId");

                    b.HasOne("CartonCaps.Invite.Model.Entities.ReferralCode", "ReferralCode")
                        .WithMany("Redemptions")
                        .HasForeignKey("ReferralCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CartonCaps.Invite.Model.Entities.ReferralSource", "ReferralSource")
                        .WithMany()
                        .HasForeignKey("ReferralSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CartonCaps.Invite.Model.Entities.User", "Referrer")
                        .WithMany("RedeemedReferrals")
                        .HasForeignKey("ReferrerId");

                    b.Navigation("Redeemer");

                    b.Navigation("ReferralCode");

                    b.Navigation("ReferralSource");

                    b.Navigation("Referrer");
                });

            modelBuilder.Entity("CartonCaps.Invite.Model.Entities.Referral", b =>
                {
                    b.HasOne("CartonCaps.Invite.Model.Entities.ReferralCode", "ReferralCode")
                        .WithMany()
                        .HasForeignKey("ReferralCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CartonCaps.Invite.Model.Entities.ReferralSource", "ReferralSource")
                        .WithMany()
                        .HasForeignKey("ReferralSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CartonCaps.Invite.Model.Entities.User", "Referrer")
                        .WithMany("Referrals")
                        .HasForeignKey("ReferrerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReferralCode");

                    b.Navigation("ReferralSource");

                    b.Navigation("Referrer");
                });

            modelBuilder.Entity("CartonCaps.Invite.Model.Entities.ReferralCode", b =>
                {
                    b.HasOne("CartonCaps.Invite.Model.Entities.User", "User")
                        .WithOne("ReferralCode")
                        .HasForeignKey("CartonCaps.Invite.Model.Entities.ReferralCode", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CartonCaps.Invite.Model.Entities.ReferralCode", b =>
                {
                    b.Navigation("Redemptions");
                });

            modelBuilder.Entity("CartonCaps.Invite.Model.Entities.User", b =>
                {
                    b.Navigation("RedeemedReferrals");

                    b.Navigation("Redemptions");

                    b.Navigation("ReferralCode")
                        .IsRequired();

                    b.Navigation("Referrals");
                });
#pragma warning restore 612, 618
        }
    }
}
